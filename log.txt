
hitscan enemy? with laser sight
    factor out the Bull's raycast. RaycastService

knock-back

multiple hitpt enemies (knock back upon initial hit)

dash sound should be attack/loop/decay

snake enemy (tail is vulnerable)

enemy that follows you, has fire spinning around it, but center is vulnerable

GOAL:
    be able to save/load the right prefabs into the right positions. don't worry about state, etc.

save/load system v2:
    we can't save/load scene files at runtime...but we can try something similar.
    we will just save/load our own scene files, which stores entity spawns and any dynamic state.
    this is to say, we shouldn't even need the scene file for each level, except for the singleton systems.
    so each 'spawn' will have transform + prefab resource path. so all entities should go into the 'resources' folder.

    need to mark every object that should be saved.
    we need to save, in the editor, the resource path. we could hook into the save event, probably.

    cons: if we do it this way, we can't rename resources. we could use the guid.. but then we need a map from guid to resource path..?
    at runtime, can we load by GUID?
    this may not be a huge deal - if we rename something, we'd just need to re-save all maps that use it...kind of a pain, but could do it automatically.

Save/load system:
    on save:

    on load:

    this can be tricky because we don't maintain strict model-view-controller separation in our scene rep..
    the "view" isn't easily derivable from a "model", and the model itself is embedded in the view/controller classes.
    when a unity scene is loaded, it is deserializing from some "model", but we don't really have access to that. we can't like, 
        save a new scene file while playing the game... that would be nice. perhaps a bit wasteful, but one could imagine
        just saving a diff from the shipped level...there may be some inefficiencies would rapid reloading, due to resources,
        but you could probably just keep a resource cache and do a GC right after loading.

    given we can't do that, what can we do instead? first we need to decide...on load, do we reload the scene?
    1) reload the scene.
        upon reload, we'd have to go over the whole scene, then manipulate parts we want to reload.
    2) don't reload.
        we'd have to go over the whole scene..and manipulate some of it.

    ok, seems like there isn't much reason to reload the scene. so let's not do that.

    now, not all data of the scene needs to be saved/reloaded. obviously, some things like game settings, should be saved/loaded through a separate
    action. and some stuff can be easily derived from upstream state, such as shader effect state dependent on health. other stuff is just not worth saving,
    such as the state of particle systems.
    so we have a subset of stuff we want to save. whatever this subset is should be determined in a granular way, so we want some way
    for each node in the tree to say, "should we keep recursing" for state saving/loading? and which components should be saved?

    also, the system will need to be responsible for not just change ops, but also adds and subtracts.
    so each node should probably have an ID, and if a node is no longer existing, it should be destroyed.
    there should be no distinction between nodes that were part of the init scene and new nodes.
    each node that is serialized needs to specify how it was created. so this can mean, specifying the prefab ID.

level idea: escort mission, where you have to quickly destroy asteroids flying at a target. if too many hit the target, you loooose

TODO: platforms, ie. when you touch it, you start moving with it. could also rotate! especially for no-boost zones

environmental weapons:
    touch a thing, get ability to touch-attack once

corrosive zones and heal zones
    can make time-sensitive traversal parts

hugger: enemy that wraps around you. you have to get it off by grazing lava.
    ala metroid

puzzles where you have to lead a smartbomb into an area. maybe multiple!

force zones
    need player interface to add forces...temporary and sustained

puzzles where you draw out a line, like infinite snake
    could copy some Witness puzzles - heh! maybe with action elements
walls that bounce you off immediately...? not that interesting.
no-boost zones
    puzzles?
    could do single-boost-only puzzles with no-boost zones and a boost-OK hole

change size, ala. badland

like VVVVVV, with regular intra-level checkpoints.
metroid-vania, like RWK

temp power ups (ex: touch a wall, get triple-boost for 10 seconds)
minimap
Boomerang throw by out and back motion

powerups:
    forward-explosion on boost
    digging


-----------------------------
-----------------------------
-----------------------------
-----------------------------
-----------------------------
-----------------------------

fix bug: if rapidly to "right down" to just move one space, it can often lead to immediately right again probably due to the hold logic.
    solution: we should buffer the last edge only. so in this case, the last edge would be the down.
    this would still work in the "hit and move" case, since then, the right key would be the last edge.
implement raycast to test
implement grab: ie. even if out of boosts, do a quick raycast in a direciton,
      if it hits a wall, then allow to stop right there.
    done, but not sure if i like it.

turret
combat - boost to attack?
DONE redo controls so boost doesn't need "runway"
DONE digging
DONE obstacles that need double-boost to get past
DONE charge-type enemies, ie. invulnerable unless you let them charge, then dodge, then hit behind.
    then telegraph 2s, then charge. chaser should have clear front-armor
    implemented BullMaster
DONE: Fix issue where if you hit a direction on the same frame as collision stopping you, you just stop
short term:
    done. this was caused by the rest frame, but also the physics stopping.
DONE: enemies explode into health pickups..
puzzle: instead of "one boost" zones, you could sort of do similar puzzles with rigidbodies you knock around.
    ie. if they hit lava, they get destroyed
    these are basically block puzzles.....
DONE SHORT TERM:
    ok, before we create a crazy level pipeline, let's actually just manually create a world first. manually. using some unity 2d editing plugin, or just some grid-based tools.
    so, let's just setup a quick pipeline for manual editing
DONE: structure.
    metroidvania:
        examples:
            metroid
            SOTN
            VVVVVV
        pros:
            sense of exploring a place, immersive
            multiple fronts, so if player gets stuck, they can push somewhere else. and maybe that helps them (grinding in SOTN)
        cons:
            backtracking
            more planning (levels must work forward and backward; all areas must fit together;)
            'what next?' 
                some gates may be non-obvious to observe/open. such as, breaking the ice floor in SOTN. or the switch that opens red floors.
                Metroid Prime had some hints, ie. the map pings

    series of levels:
        examples:
            ecco the dolphin
            DOOM
            Deus Ex

        pros:
            easier to plan

        cons:
            if levels too small, less sense of exploration. but Ecco still succeeded
            unable to go back to levels to grind (without breaking immersion, like Goblin Sword)

    hub:
        examples: Demons' Souls, Mega Man
        pros:   
            less confusing, but still multi-front
            can be sense of cohesive space...but spokes may be too separate
        cons:
            less cohesive narrative progression. 

    GOALS FOR STRUCTURE:
        a sense that you're exploring a single, real space.
            good examples:
                Half-Life. Metroids. SOTN. Fallouts. Dark Souls. Shadow of the Colossus. Outcast.
                continuity seems pretty important. not necessarily backtracking..but maybe some.
                MGS3.
            bad examples:
                Demon's Souls - the hub spokes felt too independent from each other. contrast with Dark Souls.

        a sense of forward progression, towards the center/end
            good examples: The Room. Zelda.
                I guess to have a sense of progression towards something spatially, you need to first have an idea of where that thing is.
                For The Room, it was obvious: get the box to open. For zelda, the compass.

        sense of mystery and exploration    
            Good: Ecco, Half Life, Metroid
            i feel like the structure doesn't have much to do with this. it's more about tone, progression of content, etc. which can be done in any physical structure with gating.

        the ability to fill out a map, as long as it doesn't take too long
            Good: DOOM, Descent, Fallout.
            Not so great: Metroid Prime, SOTN. I think I was annoyed by the lack of info on the map. ie. if i knew that this unexplored part required double jump, then that's fine.

    NON GOALS:
         backtracking, open-world "do whatever you want"
         tons of secrets littered around

    STUFF I JUST DIDN'T LIKE ABOUT METROIDVANIAS:
        annoying backtracking. like in metroid prime, that part with all the colored robots that were mad annoying to fight. had to do it each time. but, other parts where you could run through were fun.
        not knowing what to do next
            SOTN: i got double jump, yay, now what? ok let's go to this gray spot on the map...oh it requires something ELSE. ugh ok next...
            i could keep my own notes. or the game could do it for me...or let me do it in-game with map notes.
            Metroid Prime: the door colors were helpful. still had some non-map info tho, like where you needed the ball and stuff. MAP NOTES!

    CONCLUSION: gonna go with linear with big, non-linear levels. like Ecco, DOOM. mystery, exploration still achievable. no backtracking/confusion/planning.
DONE locks and keys - knock a key around to get it to the door
DONE or just buttons to open doors
player skills progression:

    basic arrow movement
        all 4 dirs
    avoiding lava with:
        1 quick turn
        2 quick turns
        3 quick turns
        aiming into a hole
    stopping by going into a wall
    stalling back and forth
levels and structure
DONE: way of making sure enemies are in-view before they attack? for things like the bull
DONE: rocks that bounce around, with one fire side. or a fire tail
    bouncing too fast is not fun.
